Day05 函数**********
一、  函数基本使用 
	概念，定义（表达式，字面量），作用
		什么是函数：
			具有某种特定功能的代码块
		为什么要有函数
			1、函数可以解决代码复用问题
			2、函数可以把整个项目模块化
		
		前面的图形案例引入

		函数定义（字面量定义和表达式定义   先定义后使用   三要素***）

			//函数定义或者调用都要考虑函数的三要素：功能  参数   返回值；
			
			//功能：一般说的就是函数能做什么  通常情况下函数名就代表着函数的功能
				// 侧面告诉我们函数的名字要见名思意；
			
			//参数：函数的小括号当中，写的是参数，函数定义的参数，我们被称作形参（形式参数）;
			//	函数调用的时候,小括号里面也写的是参数,这些参数我们称作实参(实际参数);
			// 函数调用的实参本质上是在给函数定义的形参  进行赋值(把实参的值赋值给形参，通常叫传参)；
				注意：//形参写出来就相当于在函数内部 var了一个变量
			
			
			//返回值： 每一个函数都会有返回值，有的函数返回值比较明确，写了return,但是有的函数
			//没有写return，并不是代表这个函数没有返回值，而是省略了return，实际上返回值是undefined
			//函数调用也被函数调用表达式；既然函数调用是一个表达式，那么函数调用就是有值的，
			//函数返回值就是函数调用表达式的值；
		
	

	
二、 函数的分类
	1)	无参无返回值
	2)	有参无返回值
	3)	无参有返回值
	4)	有参有返回值
	

三、 强化练习

	编写求和函数
	编写函数求数组的最大值，最小值
	编写函数打印个人简介
	封装函数加工数组，每一项加10输出
	根据用户输入的数值求1到该数值的累加和

	function add(a){



		return sum;
	}

	提示用户输入账号和密码，实现登录成功效果，如果失败，再次提示


四、  作用域 

	1)	作用域概念，定义，作用（函数的执行过程，程序执行的过程）

		作用域说的是变量起作用的区域或者范围；
		作用域的作用：变量在各自的作用域当中起作用；

		
		
	2)	局部变量和全局变量
		局部变量：在局部作用域当中的变量（函数当中定义的变量）
		全局变量：在全局作用域当中的变量（函数外部定义的变量）

		局部变量和全局变量 没有任何关系

		全局变量在哪都可以使用    而局部变量只能在自己局部作用域当中使用；


		var a = 10;
		var b = 20;
		function f1(a,b){
			a = 20;
			b = 10;
			console.log(a,b);
		}
		f1(a,b);

		console.log(a,b);
		


		
	3)	作用域分类(全局，局部，块级)，
		
		if(){
			var a = 10	
	
		}


		在es5当中没有块级作用域，只有全局和局部


		全局作用域和局部作用域当中定义变量的坑：

			当我们定义变量的时候，都会加一个var，但是也有不加var的情况：
			
			如果是在全局：没有定义过的变量，不加var，那么必须给这个变量赋值，而且相当于给这个变量加var，是一个地地道道的全局变量
			如果是在局部：没有定义过的变量（没有参数是它，也没有加var），定义这个变量不加var，首先要看外部全局是否定义过这个变量
		如果全局定义过，那么这个变量就不是在初始化，而是在操作全局变量。如果没有定义过，相当于在全局加var定义了这个变量；







	4)	案例:
	面试题
		var num = 10;
		function fun() {
  			var num = 20;
  			fun2();
		}


		function fun2() {
  			console.log(num);
		}


		fun();

	5）     作用域链： 说的是变量在查找的过程，变量在查找的时候，首先从自己的作用域当中去查找，如果没有，往上一级作用域当中去查找
		一直查知道函数外部的全局作用域，只要找到，立即停止往上找，直接输出。如果没有找到会一直网上查，如果最后查到函数外部的全局
		都没有，报错；





	6）   程序执行过程当中内存是怎么表现的



		


第五节: 预解析 预解释 声明提升  变量提升
	a)	预解析演示
			变量   带var和不带var: 预解析只会解析带var的变量，如果不带var，不进行预解析；

			函数   字面量和表达式函数关系

				function f1(){}            如果是这种写法；函数整体会提升
				var f1 = function(){}	   如果是这种写法；只会提升var f1; 不会提升函数的表达式；

	b)	预解析效果
			全局 
				全局当中所有带var的变量  以及使用字面量定的函数  都要提升到全局的最上方

			函数
				函数当中所有带var的变量，以及使用字面量定的函数  都要提升到这个函数的局部环境的最上方
			
	c)	面试题:下面的alert会弹出什么值
	--------------------------------------------------------
	
	alert(a);    
	a = 0;
	
	--------------------------------------------------------

	alert(a);    
	var a = 0;
	alert(a);    

	--------------------------------------------------------

	alert(a);    
	var a = '我是变量';
	function a(){ alert('我是函数') }
	alert(a);    

	--------------------------------------------------------

	alert(a); 
	a++;
	alert(a);    
	var a = '我是变量';
	function a(){ alert('我是函数') }
	alert(a)   

	--------------------------------------------------------

	alert(a);   
	var a = 0;
	alert(a);   
	function fn(){
 		alert(a);    
 		var a = 1;
 		alert(a);    
	}
	fn()
	alert(a);    

	--------------------------------------------------------


	alert(a);    
	var a = 0;
	alert(a);    
	function fn(){
   		alert(a);    
   		a = 1;
   		alert(a);   
	}
	fn()
	alert(a);   

	--------------------------------------------------------

第六节: IIFE，函数作为参数 & arguments

IIFE: Immediately Invoked Function Expression，意为立即调用的函数表达式（匿名函数自调用）
	作用？

函数是可以作为参数传递的（一般都是回调函数）
回调函数定义：如果一个函数被当作参数传给另外一个函数，那么这个函数就被称作回调函数，虽然概念是这么定义的，但是真正的回调函数还要符合下面
几个特点；如果不符合，我们不能称作是真正回调；

	回调函数：函数是我定义的   我没有调用    最终执行了~  

		
	
	事件          本来就是一个方法或者函数   写回调函数
	定时器
	ajax
	生命周期回调函数


Arguments  函数实参伪数组

	在每个函数当中，都会有一个实参的伪数组，这个东西是专门用来存储函数调用传过来的实参，即使你的函数定义当中没有形参，这个arguments当中也会存储你的实参；因此在js当中可以这么说，形参可有可无；
	
通常情况下我们可以根据这个arguments伪数组的长度去让一个函数表现出不同的功能，函数定义当中肯定是一个if else判断



晚自习强化练习
	作业: 
		面试题: 函数，作用域，预解析（必须理解）


		数组去重
		合并数组，原生实现
	
